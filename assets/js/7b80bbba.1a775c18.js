"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[2214],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>f});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function s(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var d=r.createContext({}),o=function(t){var e=r.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=o(t.components);return r.createElement(d.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,d=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),u=o(a),c=n,f=u["".concat(d,".").concat(c)]||u[c]||m[c]||l;return a?r.createElement(f,i(i({ref:e},p),{},{components:a})):r.createElement(f,i({ref:e},p))}));function f(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=c;var s={};for(var d in e)hasOwnProperty.call(e,d)&&(s[d]=e[d]);s.originalType=t,s[u]="string"==typeof t?t:n,i[1]=s;for(var o=2;o<l;o++)i[o]=a[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},35840:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var r=a(87462),n=(a(67294),a(3905));const l={},i="AddressLib",s={unversionedId:"aggregation-protocol/smart-contract/helpers/AddressLib",id:"aggregation-protocol/smart-contract/helpers/AddressLib",title:"AddressLib",description:"Library for working with addresses encoded as uint256 values, which can include flags in the highest bits.",source:"@site/docs/aggregation-protocol/smart-contract/helpers/AddressLib.md",sourceDirName:"aggregation-protocol/smart-contract/helpers",slug:"/aggregation-protocol/smart-contract/helpers/AddressLib",permalink:"/docs/aggregation-protocol/smart-contract/helpers/AddressLib",draft:!1,editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/aggregation-protocol/smart-contract/helpers/AddressLib.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UnoswapRouter",permalink:"/docs/aggregation-protocol/smart-contract/UnoswapRouter"},next:{title:"EthReceiver",permalink:"/docs/aggregation-protocol/smart-contract/helpers/EthReceiver"}},d={},o=[{value:"Functions",id:"functions",level:2},{value:"get",id:"get",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Return values",id:"return-values",level:4},{value:"getFlag",id:"getflag",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Return values",id:"return-values-1",level:4},{value:"getUint32",id:"getuint32",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Return values",id:"return-values-2",level:4},{value:"getUint64",id:"getuint64",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Return values",id:"return-values-3",level:4}],p={toc:o},u="wrapper";function m(t){let{components:e,...a}=t;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"addresslib"},"AddressLib"),(0,n.kt)("p",null,"Library for working with addresses encoded as uint256 values, which can include flags in the highest bits.\n",(0,n.kt)("inlineCode",{parentName:"p"},"type Address is uint256;")),(0,n.kt)("h2",{id:"functions"},"Functions"),(0,n.kt)("h3",{id:"get"},"get"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"function get(\n    Address a\n) internal pure returns (address)\n")),(0,n.kt)("p",null,"Returns the address representation of a uint256"),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"a")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Address"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The uint256 value to convert to an address")))),(0,n.kt)("h4",{id:"return-values"},"Return values"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"address"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The address representation of the provided uint256 value")))),(0,n.kt)("h3",{id:"getflag"},"getFlag"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"function getFlag(\n    Address a, \n    uint256 flag\n) internal pure returns (bool)\n")),(0,n.kt)("p",null,"Checks if a given flag is set for the provided address"),(0,n.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"a")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Address"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The address to check for the flag")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"flag")),(0,n.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The flag to check for in the provided address")))),(0,n.kt)("h4",{id:"return-values-1"},"Return values"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,n.kt)("td",{parentName:"tr",align:"left"},"True if the provided flag is set in the address, false otherwise")))),(0,n.kt)("h3",{id:"getuint32"},"getUint32"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"function getUint32(\n    Address a, \n    uint256 offset\n) internal pure returns (uint32)\n")),(0,n.kt)("p",null,"Returns a uint32 value stored at a specific bit offset in the provided address"),(0,n.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"a")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Address"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The address containing the uint32 value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"offset")),(0,n.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The bit offset at which the uint32 value is stored")))),(0,n.kt)("h4",{id:"return-values-2"},"Return values"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"uint32"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The uint32 value stored in the address at the specified bit offset")))),(0,n.kt)("h3",{id:"getuint64"},"getUint64"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"function getUint64(\n    Address a, \n    uint256 offset\n) internal pure returns (uint64)\n")),(0,n.kt)("p",null,"Returns a uint64 value stored at a specific bit offset in the provided address"),(0,n.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"a")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Address"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The address containing the uint64 value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"offset")),(0,n.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The bit offset at which the uint64 value is stored")))),(0,n.kt)("h4",{id:"return-values-3"},"Return values"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"uint64"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The uint64 value stored in the address at the specified bit offset")))))}m.isMDXComponent=!0}}]);