"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[7002],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>g});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),d=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=d(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(t),p=i,g=u["".concat(l,".").concat(p)]||u[p]||m[p]||o;return t?n.createElement(g,a(a({ref:r},s),{},{components:t})):n.createElement(g,a({ref:r},s))}));function g(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var d=2;d<o;d++)a[d]=t[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},96378:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=t(87462),i=(t(67294),t(3905));const o={sidebar_position:1},a="Quick start",c={unversionedId:"limit-order-protocol/utils/guide/quick-start",id:"limit-order-protocol/utils/guide/quick-start",title:"Quick start",description:"Installation",source:"@site/docs/limit-order-protocol/utils/guide/quick-start.md",sourceDirName:"limit-order-protocol/utils/guide",slug:"/limit-order-protocol/utils/guide/quick-start",permalink:"/docs/limit-order-protocol/utils/guide/quick-start",draft:!1,editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/limit-order-protocol/utils/guide/quick-start.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"About",permalink:"/docs/limit-order-protocol/utils/about"},next:{title:"Create a limit order",permalink:"/docs/limit-order-protocol/utils/guide/create-limit-order"}},l={},d=[{value:"Installation",id:"installation",level:2},{value:"Example on how to create and fill a limit order",id:"example-on-how-to-create-and-fill-a-limit-order",level:2}],s={toc:d},u="wrapper";function m(e){let{components:r,...t}=e;return(0,i.kt)(u,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick start"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @1inch/limit-order-protocol-utils\n# or\nyarn add @1inch/limit-order-protocol-utils\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Note"))),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"@1inch/limit-order-protocol")," package is now used for smart contract distribution and no longer contains this library.")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"example-on-how-to-create-and-fill-a-limit-order"},"Example on how to create and fill a limit order"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    limirOrderProtocolAdresses,\n    seriesNonceManagerContractAddresses,\n    ChainId,\n    Erc20Facade,\n    LimitOrderBuilder,\n    LimitOrderProtocolFacade,\n    LimitOrderPredicateBuilder,\n    NonceSeriesV2,\n    SeriesNonceManagerFacade,\n    SeriesNonceManagerPredicateBuilder,\n    Web3ProviderConnector\n} from '@1inch/limit-order-protocol-utils';\n\nconst chainId = ChainId.etherumMainnet; // suggested, or use your own number\nconst connector = new Web3ProviderConnector(new Web3('...'));\nconst contractAddress = limirOrderProtocolAdresses[chainId];\nconst seriesContractAddress = seriesNonceManagerContractAddresses[chainId];\n\nconst limitOrderProtocolFacade = new LimitOrderProtocolFacade(contractAddress, chainId, connector);\nconst seriesNonceManagerFacade = new SeriesNonceManagerFacade(seriesContractAddress, chainId, connector);]\nconst seriesNonceManagerPredicateBuilder = new SeriesNonceManagerPredicateBuilder(seriesContractAddress, chainId, connector);\nconst erc20Facade = new Erc20Facade(connector);\n\nconst expiration = 5444440000; // Some moment in future\nconst nonce = seriesNonceManagerFacade.nonce(NonceSeriesV2.LimitOrderV3, walletAddress);\n\n// Creates predicate that restricts Limit Order invalidation conditions\n// Because timestampBelowAndNonceEquals is method of another contract arbitraryStaticCall() is necessary\nconst simpleLimitOrderPredicate: LimitOrderPredicateCallData = arbitraryStaticCall(\n    seriesNonceManagerPredicateBuilder.facade,\n    seriesNonceManagerPredicateBuilder.timestampBelowAndNonceEquals(\n        NonceSeriesV2.LimitOrderV3,\n        expiration,\n        nonce,\n        walletAddress,\n    ),\n);\n\n// Create a limit order and it's signature\nconst limitOrder = limitOrderBuilder.buildLimitOrder({\n    makerAssetAddress: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    takerAssetAddress: '0x111111111117dc0aa78b770fa6a738034120c302',\n    makerAddress: walletAddress,\n    makerAmount: '100',\n    takerAmount: '200',\n    predicate: simpleLimitOrderPredicate,\n    // permit = '0x',\n    // receiver = ZERO_ADDRESS,\n    // allowedSender = ZERO_ADDRESS,\n    // getMakingAmount = ZERO_ADDRESS,\n    // getTakingAmount = ZERO_ADDRESS,\n    // preInteraction  = '0x',\n    // postInteraction = '0x', // eg Wrapped to native unwrapper\n});\n\nconst limitOrderTypedData = limitOrderBuilder.buildLimitOrderTypedData(\n    limitOrder,\n);\nconst limitOrderSignature = limitOrderBuilder.buildOrderSignature(\n    walletAddress,\n    limitOrderTypedData,\n);\n\n// Create a call data for fill the limit order\nconst callData = limitOrderProtocolFacade.fillLimitOrder({\n    order: limitOrder,\n    signature: limitOrderSignature,\n    makingAmount: '100',\n    takingAmount: '0',\n    thresholdAmount: '50'\n});\n\n// Send transaction for the order filling\n// Must be implemented\nsendTransaction({\n    from: walletAddress,\n    gas: 210_000, // Set your gas limit\n    gasPrice: 40000, // Set your gas price\n    to: contractAddress,\n    data: callData,\n});\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," you can use any implementation for the provider.",(0,i.kt)("br",{parentName:"p"}),"\n","Just implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProviderConnector")," interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class MyProviderConnector implements ProviderConnector {\n    //...\n}\n")))}m.isMDXComponent=!0}}]);