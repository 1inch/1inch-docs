"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[3176],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>k});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),u=a,k=p["".concat(c,".").concat(u)]||p[u]||m[u]||i;return r?n.createElement(k,o(o({ref:t},d),{},{components:r})):n.createElement(k,o({ref:t},d))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},79979:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const i={sidebar_position:9},o="SeriesNonceManager predicate",l={unversionedId:"limit-order-protocol/utils/guide/series-nonce-manager",id:"limit-order-protocol/utils/guide/series-nonce-manager",title:"SeriesNonceManager predicate",description:"Make sure you have read and understand",source:"@site/docs/limit-order-protocol/utils/guide/series-nonce-manager.md",sourceDirName:"limit-order-protocol/utils/guide",slug:"/limit-order-protocol/utils/guide/series-nonce-manager",permalink:"/docs/limit-order-protocol/utils/guide/series-nonce-manager",draft:!1,editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/limit-order-protocol/utils/guide/series-nonce-manager.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Predicate",permalink:"/docs/limit-order-protocol/utils/guide/predicate"},next:{title:"Limit order remaining",permalink:"/docs/limit-order-protocol/utils/guide/remaining"}},c={},s=[{value:"<code>SeriesNonceManagerFacade</code>",id:"seriesnoncemanagerfacade",level:2},{value:"<code>SeriesNonceManagerPredicateBuilder</code>",id:"seriesnoncemanagerpredicatebuilder",level:2},{value:"Built-in operators",id:"built-in-operators",level:2},{value:"<code>timestampBelowAndNonceEquals</code>",id:"timestampbelowandnonceequals",level:3},{value:"<code>nonceEquals</code>",id:"nonceequals",level:3},{value:"Examples",id:"examples",level:2}],d={toc:s},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"seriesnoncemanager-predicate"},"SeriesNonceManager predicate"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Make sure you have read and understand"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./predicate"},"predicate")),(0,a.kt)("li",{parentName:"ul"},"series ",(0,a.kt)("a",{parentName:"li",href:"./nonce"},"nonce")))),(0,a.kt)("br",null),(0,a.kt)("p",null,'Since Limit Order Protocol V3 nonce management are delegated to SeriesNonceManager smart contract in terms of usual Limit Orders and P2P (aka "private limit order"), there are two helpful classes:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SeriesNonceManagerFacade")," \u2014 an interface for interacting with smart contract"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SeriesNonceManagerPredicateBuilder")," \u2014 an ",(0,a.kt)("a",{parentName:"li",href:"./predicate"},(0,a.kt)("inlineCode",{parentName:"a"},"LimitOrderPredicateBuilder")),"-compatible DSL for building predicate, which relays on SeriesNonceManager")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"seriesnoncemanagerfacade"},(0,a.kt)("inlineCode",{parentName:"h2"},"SeriesNonceManagerFacade")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"./nonce"},"nonce")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"seriesnoncemanagerpredicatebuilder"},(0,a.kt)("inlineCode",{parentName:"h2"},"SeriesNonceManagerPredicateBuilder")),(0,a.kt)("p",null,"Partially implements ",(0,a.kt)("a",{parentName:"p",href:"./predicate"},"LimitOrderPredicateBuilder")," for same purpose, but for SeriesNonceManager smart contract."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Incompatible with Gasless!"))),(0,a.kt)("p",{parentName:"blockquote"},"For Gasless orders use ",(0,a.kt)("a",{parentName:"p",href:"./predicate"},(0,a.kt)("inlineCode",{parentName:"a"},"LimitOrderPredicateBuilder")),".")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"built-in-operators"},"Built-in operators"),(0,a.kt)("h3",{id:"timestampbelowandnonceequals"},(0,a.kt)("inlineCode",{parentName:"h3"},"timestampBelowAndNonceEquals")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"timestampBelowAndNonceEquals(\n    timestamp: number | bigint,\n    makerNonce: number | bigint,\n    makerAddress: string\n)\n")),(0,a.kt)("p",null,"The predicate checks the same as ",(0,a.kt)("inlineCode",{parentName:"p"},"and(timestampBelow(), nonceEquals())"),"."),(0,a.kt)("h3",{id:"nonceequals"},(0,a.kt)("inlineCode",{parentName:"h3"},"nonceEquals")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"nonceEquals(\n    makerAddress: string,\n    makerNonce: number | bigint\n)\n")),(0,a.kt)("p",null,"The predicate checks that the ",(0,a.kt)("inlineCode",{parentName:"p"},"makerNonce")," is equal to the nonce of ",(0,a.kt)("inlineCode",{parentName:"p"},"makerAddress"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"WARNING!"))),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"To save gas")," consider using one of"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SeriesNonceManagerPredicateBuilder.timestampBelowAndNonceEquals(\u2026)")," \u2013 for everything but gasless"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./predicate"},(0,a.kt)("inlineCode",{parentName:"a"},"LimitOrderPredicateBuilder.timestampBelowAndNonceEquals(\u2026)"))," \u2013 for gasless only")),(0,a.kt)("p",{parentName:"blockquote"},"instead as it more optimal then separate ",(0,a.kt)("inlineCode",{parentName:"p"},"and(timestampBelow(), nonceEquals())")," calls.")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Because timestampBelowAndNonceEquals is method of another contract arbitraryStaticCall() is necessary\nconst simpleLimitOrderPredicate: LimitOrderPredicateCallData = arbitraryStaticCall(\n    seriesNonceManagerPredicateBuilder.facade,\n    seriesNonceManagerPredicateBuilder.timestampBelowAndNonceEquals(\n        NonceSeriesV2.LimitOrderV3,\n        expiration,\n        nonce,\n        walletAddress,\n    ),\n);\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"./predicate"},(0,a.kt)("inlineCode",{parentName:"a"},"LimitOrderPredicateBuilder"))," for more examples on using ",(0,a.kt)("inlineCode",{parentName:"p"},"LimitOrderPredicateBuilder")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"SeriesNonceManagerPredicateBuilder")," together."))}m.isMDXComponent=!0}}]);