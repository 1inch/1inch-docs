"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[9058],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var i=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,o=function(e,t){if(null==e)return{};var r,i,o={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=i.createContext({}),d=function(e){var t=i.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=d(e.components);return i.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(r),u=o,f=p["".concat(c,".").concat(u)]||p[u]||m[u]||n;return r?i.createElement(f,a(a({ref:t},s),{},{components:r})):i.createElement(f,a({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,a=new Array(n);a[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var d=2;d<n;d++)a[d]=r[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},87009:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var i=r(87462),o=(r(67294),r(3905));const n={sidebar_position:10},a="Validate a limit order",l={unversionedId:"limit-order-protocol/utils/guide/validate-limit-order",id:"limit-order-protocol/utils/guide/validate-limit-order",title:"Validate a limit order",description:"There is the possibility to check limit order validity.",source:"@site/docs/limit-order-protocol/utils/guide/validate-limit-order.md",sourceDirName:"limit-order-protocol/utils/guide",slug:"/limit-order-protocol/utils/guide/validate-limit-order",permalink:"/docs/limit-order-protocol/utils/guide/validate-limit-order",draft:!1,editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/limit-order-protocol/utils/guide/validate-limit-order.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Limit order remaining",permalink:"/docs/limit-order-protocol/utils/guide/remaining"},next:{title:"Interaction receiver",permalink:"/docs/limit-order-protocol/utils/guide/interactive-receiver"}},c={},d=[{value:"<code>LimitOrderProtocolFacade.simulate</code>",id:"limitorderprotocolfacadesimulate",level:2},{value:"<code>LimitOrderProtocolFacade.checkPredicate</code>",id:"limitorderprotocolfacadecheckpredicate",level:2},{value:"Example:",id:"example",level:2}],s={toc:d},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,i.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"validate-a-limit-order"},"Validate a limit order"),(0,o.kt)("p",null,"There is the possibility to check limit order validity.",(0,o.kt)("br",{parentName:"p"}),"\n","For example, you can check that a limit order is valid by predicates."),(0,o.kt)("h2",{id:"limitorderprotocolfacadesimulate"},(0,o.kt)("inlineCode",{parentName:"h2"},"LimitOrderProtocolFacade.simulate")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"LimitOrderProtocolFacade.simulate(\n    targetAddress: string,\n    calldata: string\n)\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Under the hood:"),(0,o.kt)("br",{parentName:"p"}),"\n","On a ",(0,o.kt)("inlineCode",{parentName:"p"},"simulate()")," call, the contract reverts with ",(0,o.kt)("inlineCode",{parentName:"p"},"error SimulationResults(bool success, bytes res)")),(0,o.kt)("p",{parentName:"blockquote"},"Where ",(0,o.kt)("inlineCode",{parentName:"p"},"success")," indicates that call doesn't revers, and ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," is a function call result.")),(0,o.kt)("h2",{id:"limitorderprotocolfacadecheckpredicate"},(0,o.kt)("inlineCode",{parentName:"h2"},"LimitOrderProtocolFacade.checkPredicate")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"LimitOrderProtocolFacade.checkPredicate(\n    order: LimitOrder\n)\n")),(0,o.kt)("p",null,"More lightweight version, only ",(0,o.kt)("inlineCode",{parentName:"p"},"predicate")," field is required in order structure."),(0,o.kt)("h2",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    LimitOrderProtocolFacade,\n    LimitOrder,\n    Web3ProviderConnector\n} from '@1inch/limit-order-protocol-utils';\n\nconst contractAddress = limirOrderProtocolAdresses[chainId];\nconst order: LimitOrder = {...};\n\nconst connector = new Web3ProviderConnector(new Web3('...'));\nconst limitOrderProtocolFacade = new LimitOrderProtocolFacade(contractAddress, chainId, connector);\n\nconst {\n    success: boolean,\n    rawResult: string,\n} = await limitOrderProtocolFacade.simulate(contractAddress, order.predicate);\nconsole.log('Order validity: ', success);\n\nconst predicateValidity: boolean = limitOrderProtocolFacade.checkPredicate(order);\nconsole.log('Predicate validity: ', predicateValidity);\n\n")))}m.isMDXComponent=!0}}]);